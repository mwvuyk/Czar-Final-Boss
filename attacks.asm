
PhaseOneRaise:
    LDA hydra.generic_state
    JSL $0086DF
    
   dw InitBreath
   dw FireRing
   dw WaitMoveOn
   dw FireRing
   dw WaitMoveOn
   dw FireRing
   dw WaitMoveOn
   dw FireRing
   dw EndBreath

    dw TailSwipeAnim
    dw TailSwipeDown
    dw TailSwipe
    dw TailSwipe2
    dw TailSwipe
    dw TailSwipe2
    dw TailSwipe
    dw TailSwipe2
    dw TailSwipePreEnd
    dw TailSwipeEnd
    dw .Repeat
    
        .Repeat:
            STZ hydra.generic_state
            STZ hydra.generic_timer
            JMP PhaseOneRaise

            SkipTbl:
            db $03,$06,$02,$05,$05,$07,$04,$01
            


        FireRing:   
            LDX hydra.misc2 ;make a hole in the fire
            LDA hydra.misc1
            CMP SkipTbl,x
            BNE +
            INC : INC : INC
            STA hydra.misc1
            +
            
            LDY hydra.cluster_slot
            LDA #!ClRingFlameAlt
            STA !cl_n,y
            
            LDX hydra.misc1 ;spawn cluster sprites depending on tables generated by aim.py
            LDA RingXHi,x
            STA !cl_xh,y
            LDA RingYHi,x
            STA !cl_yh,y
            LDA RingXPos,x
            STA !cl_x,y
            LDA RingYPos,x
            STA !cl_y,y
            LDA RingXSpeed,x
            STA !cl_u,y
            LDA RingYSpeed,x
            STA !cl_v,y

            %clusterfinish()
            +
            

            
            LDA hydra.misc1
            INC
            STA hydra.misc1
            CMP #20
            BNE FireRing
            STZ hydra.misc1
            
            %incloop(hydra.misc2, #$08)   
            LDA #$17;sound
            STA $7DFC
            
            LDA #$50
            STA hydra.generic_timer ;next
            INC hydra.generic_state
            
            RTS
        

            
        TailSwipeAnim:

            !endpos = !inity+$78
            !endposl = !endpos&$ff
            !endposh = !endpos>>8
            !tt1 = $20
            !tt2 = $48

            LDA hydra.animation
            CMP !ANIM_hup
            BEQ +
            %setanim(!ANIM_hup)
            LDA #$40
            STA hydra.generic_timer
            RTS
            +
            DEC hydra.generic_timer
            BNE +
            INC hydra.generic_state
            +
            RTS



        TailSwipeDown:
            INC !RAM_SpriteSpeedY,x
            INC !RAM_SpriteSpeedY,x

            LDA !RAM_SpriteYHi,x 
            XBA
            LDA !RAM_SpriteYLo,x
            REP #$20
            CMP #!endpos
            SEP #$20
            BCS +
            RTS
            +
            INC hydra.generic_state
            LDA #$04;draw tail
            STA hydra.segments
            LDA #$01
            STA hydra.diry ;x+y flip
            STA hydra.dirx
            %setanim(!ANIM_tail)
            JSR ResetStuff
            RTS

        ResetStuff:
            LDA #$60
            STA !RAM_SpriteSpeedY,x
            LDA #!tt1
            STA hydra.generic_timer
            LDA $7E
            SEC : SBC #$08;position under mario
            STA !RAM_SpriteXLo,x
            LDA.b #!endposh
            STA !RAM_SpriteYHi,x 
            LDA.b #!endposl
            STA !RAM_SpriteYLo,x
            RTS

        TailSwipe:

            LDA !RAM_SpriteSpeedY,x
            CLC : ADC #$08
            STA !RAM_SpriteSpeedY,x

            DEC hydra.generic_timer
            BNE +
            JSR SpawnGP 
            LDA #$27
            STA $7DFC
            LDA #!tt2
            STA hydra.generic_timer
            LDA #$90
            STA !RAM_SpriteSpeedY,x
            INC hydra.generic_state
            +
            RTS

        TailSwipe2:
            INC !RAM_SpriteSpeedY,x
            INC !RAM_SpriteSpeedY,x
            INC !RAM_SpriteSpeedY,x
            DEC hydra.generic_timer
            BNE +
            INC hydra.generic_state
            LDA #!tt1
            STA hydra.generic_timer
            JSR ResetStuff

            +
            RTS

        TailSwipePreEnd:
            LDA #$03
            STA hydra.segments
            
            STZ !RAM_SpriteSpeedY,x
            STZ hydra.misc1    
            STZ hydra.diry
            STZ hydra.dirx
            INC hydra.generic_state
            LDA #$08                ;reset
            STA !RAM_SpriteXLo,x
            %setanim(!ANIM_rise)
            RTS

        TailSwipeEnd:

            
            LDA !RAM_SpriteYHi,x ;Rise.
            XBA
            LDA !RAM_SpriteYLo,x
            REP #$20
            DEC : DEC : DEC : DEC
            CMP #!inity
            SEP #$20
            BCS +
        
            PHA
            LDA #$50
            STA hydra.generic_timer;next  
            INC hydra.generic_state
            
            PLA
            
            +
            STA !RAM_SpriteYLo,x
            XBA
            STA !RAM_SpriteYHi,x
            RTS
            
        InitBreath:
            LDA #$01
            STA hydra.canbehit
            STZ hydra.generic_timer
            STZ hydra.misc1
            STZ hydra.misc2
            STZ hydra.misc3

            LDA hydra.animation
            CMP !ANIM_fidle
            BNE +
            INC hydra.generic_state
            RTS
            +
            LDA hydra.animation
            CMP !ANIM_fcharge
            BEQ +
            %setanim(!ANIM_fcharge)
            +
            RTS

        EndBreath:
            LDA hydra.animation
            CMP !ANIM_idle
            BNE +
            INC hydra.generic_state
            RTS
            +
            LDA hydra.animation
            CMP !ANIM_fend
            BEQ +
            %setanim(!ANIM_fend)
            +
            RTS

PhaseTwoRaise:
    LDA hydra.generic_state
    JSL $0086DF

    dw WaitMoveOn
    dw InitBreath
    dw PreFireBarrage
    dw FireBarrage
    dw EndBreath

    dw PreInitCharge
    dw InitCharge
    dw DoCharge
    dw DoCharge
    dw DoCharge
    dw DoCharge
    dw PreEndCharge
    dw EndCharge
    dw .Repeat


    .Repeat:
        STZ hydra.generic_state
        STZ hydra.generic_timer
        JMP PhaseTwoRaise

    PreInitCharge:
        STZ hydra.canbehit
        LDA #$50
        STA hydra.generic_timer
        INC hydra.generic_state
        %setanim(!ANIM_hdown)
    InitCharge:

        LDA hydra.generic_timer
        CMP #$39
        BCS +
        REP #$20
        LDA $20
        INC
        STA $7468
        SEP #$20
        DEC !RAM_SpriteYLo,x
        +
        DEC hydra.generic_timer
        BNE +
        LDA #$30
        STA hydra.generic_timer

        LDA #$01
        STA hydra.misc1
        STZ hydra.misc2

        INC hydra.generic_state
        +
        RTS

    !spd = $68
    chgspd:
    db !spd-10,-!spd,!spd,-!spd,!spd,-!spd,!spd,-!spd,!spd
    DoCharge:
        LDA !RAM_SpriteSpeedX,x
        CLC : ADC hydra.misc1
        STA !RAM_SpriteSpeedX,x
        LDY hydra.misc2
        CMP chgspd,y
        BNE +
        INC hydra.generic_state
        LDA hydra.dirx
        EOR #$01
        STA hydra.dirx
        LDA hydra.misc1
        EOR #$FF
        INC
        STA hydra.misc1
        INC hydra.misc2
        LDA #$00
        STA !RAM_SpriteSpeedX,x
        STA !14F8,X
        +
        RTS

    PreEndCharge:
        LDA #$30
        STA !RAM_SpriteSpeedX,x
        LDA #$00
        STa !14F8,X
        %setanim(!ANIM_halt)
        INC hydra.generic_state


    EndCharge:

        LDA !RAM_SpriteXLo,x
        CMP #$08
        BNE +
        STZ !RAM_SpriteSpeedX,x
        +
        CMP #$09
        BNE +
        STZ !RAM_SpriteSpeedX,x
        DEC !RAM_SpriteXLo,x
        +
        INC !RAM_SpriteYLo,x : INC !RAM_SpriteYLo,x
        REP #$20
        LDA $20
        DEC : DEC
        STA $7468
        SEP #$20
        BNE +
        
        
        
        INC hydra.generic_state
        LDA #$01
        STA hydra.canbehit
        +
        RTS

        !FireSpeed = $06
    PreFireBarrage:
        INC hydra.generic_state
        LDA #-!FireSpeed
        STA hydra.misc2
        LDA #!FireSpeed*6
        STA hydra.misc1
        LDA #$30
        STA hydra.misc3
        STZ hydra.misc4
    FireBarrage:
        INC hydra.misc3
        LDA hydra.generic_timer
        BEQ +
        DEC hydra.generic_timer
        RTS
        +
        LDA #$07    
        STA hydra.generic_timer
        INC hydra.misc4
        LDA hydra.misc4
        CMP #$30
        BNE +
        INC hydra.generic_state
        +


        LDA hydra.misc1
        CLC : ADC hydra.misc2
        STA hydra.misc1
        CMP #!FireSpeed*6
        BEQ +
        CMP #-!FireSpeed*7
        BNE ++
        +
        LDA hydra.misc2
        EOR #$FF
        INC
        STA hydra.misc2
        ++

        LDA hydra.misc3
        AND #$30
        BEQ .skipflame
        LDY hydra.cluster_slot
        LDA #!ClRingFlame
        STA !cl_n,y
        
        LDA !RAM_SpriteXHi,x
        STA !cl_xh,y
        LDA !RAM_SpriteYHi,x
        STA !cl_yh,y
        LDA !RAM_SpriteXLo,x
        CLC : ADC #$1B
        STA !cl_x,y
        LDA !RAM_SpriteYLo,x
        CLC : ADC #$17
        STA !cl_y,y
        LDA #$28
        STA !cl_u,y

        LDA #$17;sound
        STA $7DFC

        LDA hydra.misc1
        STA !cl_v,y



        %clusterfinish()
    .skipflame:

    RTS

PhaseThreeRaise:
    LDA #$03
    STA hydra.lolspeed
    LDA hydra.generic_state
    JSL $0086DF
    dw InitBreath
    dw FireRing
    dw WaitMoveOn
    dw FireRing
    dw WaitMoveOn
    dw EndBreath

    dw PreInitCharge
    dw InitCharge
    dw DoCharge
    dw DoCharge
    dw PreEndCharge
    dw EndCharge

    dw WaitMoveOn
    dw InitBreath
    dw PreFireBarrageShort
    dw FireBarrage
    dw EndBreath

    dw TailSwipeAnim
    dw TailSwipeDown
    dw TailSwipe
    dw TailSwipe2
    dw TailSwipe
    dw TailSwipe2
    dw TailSwipePreEnd
    dw TailSwipeEnd
    dw .Repeat
RTS
    .Repeat:
        STZ hydra.generic_state
        STZ hydra.generic_timer
        JMP PhaseThreeRaise

        PreFireBarrageShort:
        INC hydra.generic_state
        LDA #-!FireSpeed
        STA hydra.misc2
        LDA #!FireSpeed*6
        STA hydra.misc1
        LDA #$14
        STA hydra.misc3
        STA hydra.misc4
        JMP FireBarrage
PostPhaseOne:
    ;accelerate screen movement up to 4px/frame
    LDA hydra.moveamt
    CMP #$03
    BEQ ++
    LDA hydra.movetimer
    BNE +
    LDA #$28
    STA hydra.movetimer
    INC hydra.moveamt
    +
    DEC hydra.movetimer
    ++

    ;perform screen movement
    REP #$20
    LDA hydra.moveamt
    CLC : ADC $1E
    STA $7466
    STA $22
    CMP hydra.misc3
    BCC +
    LDA hydra.misc3
    STA $7466
    STA $22
    SEP #$20
    LDA #$04
    STA hydra.fightstate
    LDA #$20
    STA hydra.generic_timer
    RTS
    +
    CLC : ADC #$0020
    CMP hydra.misc3
    BCC +
    SEP #$20
    LDA hydra.animation
    CMP !ANIM_halt
    BEQ +
    %setanim(!ANIM_halt)
    +
    SEP #$20

    RTS


WaitMoveOn:
    LDA hydra.generic_timer
    BEQ ++
    DEC hydra.generic_timer
    BNE +
    ++
    INC hydra.generic_state
    +
    RTS




SpawnGP:
    LDY hydra.cluster_slot
    LDA #!ClGP
    STA !cl_n,y
    
    LDA #$00
    STA !cl_xh,y
    STA !cl_yh,y
    LDA !RAM_SpriteXLo,x
    INC : INC
    STA !cl_x,y
    LDA !RAM_SpriteYLo,x
    STA !cl_y,y
    LDA #$10
    STA !cl_u,y
    LDA #$90
    STA !cl_v,y
    
    %clusterfinish()

    LDY hydra.cluster_slot
    LDA #!ClGP
    STA !cl_n,y
    
    LDA #$00
    STA !cl_xh,y
    STA !cl_yh,y
    LDA !RAM_SpriteXLo,x
    DEC : DEC
    STA !cl_x,y
    LDA !RAM_SpriteYLo,x
    STA !cl_y,y
    LDA #$F0
    STA !cl_u,y
    LDA #$90
    STA !cl_v,y
    
    %clusterfinish()
    RTS

incsrc gentbl.asm